@model List<YourApp.Models.CijenaPodaci>
@{
    Layout = "_Layout";
    ViewData["Title"] = "Grafovi za proizvode";
    var chartIndex = 0;
    var sortedModel = Model.OrderBy(m => m.Proizvod).ToList();
}

<!DOCTYPE html>
<html lang="hr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Grafovi za proizvode</title>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
</head>
<body>
    <div class="container mt-5">
        <div class="text-center mb-4">
            <h1 class="mb-3">Vizualizacija promjena cijena</h1>
            <p class="lead">Odaberi proizvod za prikaz grafa kretanja cijena kroz vrijeme.</p>
        </div>

        <!-- Red s dropdown izbornicima (proizvod i godina) -->
        <div class="select-row">
            <select id="chartSelector" class="form-select" onchange="switchChart()">
                <option value="chart_all">Svi proizvodi</option>
                @for (int i = 0; i < sortedModel.Count; i++)
                {
                    <option value="chartContainer_@i">@sortedModel[i].Proizvod</option>
                }
            </select>

            <select id="yearFilter" class="form-select" onchange="filterByYear()">
                <option value="all">Sve godine</option>
                @{
                    var years = sortedModel
                    .SelectMany(p => p.Podaci)
                    .Select(d => d.Datum.Year)
                    .Distinct()
                    .OrderBy(y => y);

                    foreach (var year in years)
                    {
                        <option value="@year">@year</option>
                    }
                }
            </select>
        </div>

        <!-- Red s gumbima -->
        <div class="button-row">
            <button id="prevBtn" class="btn btn-outline-primary" onclick="prevChart()">
                <i class="bi bi-arrow-left-circle"></i> Prethodni
            </button>

            <button id="allBtn" class="btn btn-outline-success btn-center" onclick="showAllChart()">
                Svi
            </button>

            <button id="nextBtn" class="btn btn-outline-primary" onclick="nextChart()">
                Sljedeći <i class="bi bi-arrow-right-circle"></i>
            </button>
        </div>

        <!-- Zajednički graf za sve proizvode -->
        <div id="chart_all" class="chart-box" style="display:block;">
            <h2 class="card-title mb-3">Svi proizvodi</h2>
        </div>

        <!-- Pojedinačni grafovi -->
        @{
            chartIndex = 0; // reset index
        }
        @foreach (var chart in sortedModel)
        {
            var chartId = "chart_" + chartIndex;
            var containerId = "chartContainer_" + chartIndex;
            var data = chart.Podaci.Select(d => $"[Date.UTC({d.Datum.Year}, {d.Datum.Month - 1}, {d.Datum.Day}), {d.Cijena.ToString(System.Globalization.CultureInfo.InvariantCulture)}]");
            var chartData = string.Join(", ", data);

            <div id="@containerId" class="chart-box" style="display:none;">
                <h2 class="card-title mb-3">@chart.Proizvod</h2>
                <div id="@chartId" style="width: 100%; height: 400px;"></div>
            </div>

            chartIndex++;
        }

    </div>

    <script>
        var allDataSeries = [
        @for (int i = 0; i < sortedModel.Count; i++)
        {
            var seriesName = sortedModel[i].Proizvod;
            var seriesData = string.Join(", ", sortedModel[i].Podaci.Select(d => $"[Date.UTC({d.Datum.Year}, {d.Datum.Month - 1}, {d.Datum.Day}), {d.Cijena.ToString(System.Globalization.CultureInfo.InvariantCulture)}]"));
            <text>
                        {
                            name: '@seriesName',
                            data: [@Html.Raw(seriesData)]
                        }@((i < sortedModel.Count - 1) ? "," : "")
            </text>
        }
        ];

        window.originalData = {};

        var chart_all = Highcharts.chart('chart_all', {
            chart: { type: 'line' },
            title: { text: '' },
            xAxis: { type: 'datetime', title: { text: 'Datum' } },
            yAxis: { title: { text: 'Cijena (€)' } },
            tooltip: {
                formatter: function () {
                    var idx = this.point.index;
                    var prevY = idx > 0 ? this.series.data[idx - 1].y : this.y;
                    var change = idx > 0 ? ((this.y - prevY) / prevY * 100).toFixed(2) : '0.00';
                    return '<b>' + this.series.name + '</b><br/>' +
                        Highcharts.dateFormat('%e. %b %Y', this.x) + ': ' +
                        this.y.toFixed(2) + ' € (' + change + '%)';
                }
            },
            series: allDataSeries
        });

        allDataSeries.forEach(s => {
            window.originalData[s.name] = s.data.slice();
        });

        var charts = [];

        @for (int i = 0; i < sortedModel.Count; i++)
        {
            var chartId = "chart_" + i;
            var seriesName = sortedModel[i].Proizvod;
            var seriesData = string.Join(", ", sortedModel[i].Podaci.Select(d => $"[Date.UTC({d.Datum.Year}, {d.Datum.Month - 1}, {d.Datum.Day}), {d.Cijena.ToString(System.Globalization.CultureInfo.InvariantCulture)}]"));

            <text>
                    charts[@i] = Highcharts.chart('@chartId', {
                        chart: { type: 'line' },
                        title: { text: '' },
                        xAxis: { type: 'datetime', title: { text: 'Datum' } },
                        yAxis: { title: { text: 'Cijena (€)' } },
                        tooltip: {
                            formatter: function () {
                                var idx = this.point.index;
                                var prevY = idx > 0 ? this.series.data[idx - 1].y : this.y;
                                var change = idx > 0 ? ((this.y - prevY) / prevY * 100).toFixed(2) : '0.00';
                                return '<b>' + this.series.name + '</b><br/>' +
                                    Highcharts.dateFormat('%e. %b %Y', this.x) + ': ' +
                                    this.y.toFixed(2) + ' € (' + change + '%)';
                            }
                        },
                        series: [{
                            name: '@seriesName',
                            data: [@Html.Raw(seriesData)]
                        }]
                    });

                    window.originalData['chartContainer_@i'] = [@Html.Raw(seriesData)];
            </text>
        }

        var currentIndex = -1;

        function switchChart() {
            var selector = document.getElementById('chartSelector');
            var selected = selector.value;

            document.getElementById('chart_all').style.display = 'none';
        @for (int i = 0; i < sortedModel.Count; i++)
        {
            <text>document.getElementById('chartContainer_@i').style.display = 'none';</text>
        }

            if (selected === "chart_all") {
                document.getElementById('chart_all').style.display = 'block';
                currentIndex = -1;
            } else {
                document.getElementById(selected).style.display = 'block';
                currentIndex = parseInt(selected.split('_')[1]);
            }

            document.getElementById('yearFilter').value = 'all';
            filterByYear();
        }

        function prevChart() {
            var selector = document.getElementById('chartSelector');
            var len = selector.options.length;
            var newIndex = selector.selectedIndex - 1;
            if (newIndex < 0) newIndex = len - 1;
            selector.selectedIndex = newIndex;
            switchChart();
        }

        function nextChart() {
            var selector = document.getElementById('chartSelector');
            var len = selector.options.length;
            var newIndex = selector.selectedIndex + 1;
            if (newIndex >= len) newIndex = 0;
            selector.selectedIndex = newIndex;
            switchChart();
        }

        function showAllChart() {
            var selector = document.getElementById('chartSelector');
            selector.value = 'chart_all';
            switchChart();
        }

        function filterByYear() {
            var year = document.getElementById('yearFilter').value;

            if (currentIndex === -1) {
                chart_all.series.forEach(s => {
                    var original = window.originalData[s.name];
                    if (!original) return;

                    if (year === "all") {
                        s.setData(original);
                    } else {
                        var filtered = original.filter(p => {
                            var d = new Date(p[0]);
                            return d.getFullYear().toString() === year;
                        });
                        s.setData(filtered);
                    }
                });
            } else {
                var key = 'chartContainer_' + currentIndex;
                var chart = charts[currentIndex];
                var original = window.originalData[key];
                if (!original) return;

                var filtered;
                if (year === "all") {
                    filtered = original;
                } else {
                    filtered = original.filter(p => {
                        var d = new Date(p[0]);
                        return d.getFullYear().toString() === year;
                    });
                }
                chart.series[0].setData(filtered);
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById('chartSelector').value = 'chart_all';
            switchChart();
        });
    </script>
</body>
</html>
